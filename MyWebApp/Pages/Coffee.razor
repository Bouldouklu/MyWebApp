@page "/coffee"
@using System.ComponentModel.DataAnnotations
@using MyWebApp.Services
@implements IDisposable

<PageTitle>Coffee Log</PageTitle>

<h1>Coffee Log</h1>

<div class="row">
    <div class="col-md-8">
        <h3>Add New Coffee Entry</h3>
        
        <EditForm Model="@newCoffeeEntry" OnValidSubmit="@AddCoffeeEntry">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="coffeeName" class="form-label">Coffee Name</label>
                        <InputText id="coffeeName" class="form-control" @bind-Value="newCoffeeEntry.CoffeeName" />
                        <ValidationMessage For="@(() => newCoffeeEntry.CoffeeName)" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="temperature" class="form-label">Temperature (¬∞C)</label>
                        <InputNumber id="temperature" class="form-control" @bind-Value="newCoffeeEntry.Temperature" />
                        <ValidationMessage For="@(() => newCoffeeEntry.Temperature)" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="volume" class="form-label">Volume (ml)</label>
                        <InputNumber id="volume" class="form-control" @bind-Value="newCoffeeEntry.Volume" />
                        <ValidationMessage For="@(() => newCoffeeEntry.Volume)" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="brewType" class="form-label">Brew Type</label>
                        <InputSelect id="brewType" class="form-control" @bind-Value="newCoffeeEntry.BrewType">
                            <option value="">Select brew type...</option>
                            <option value="V60">V60</option>
                            <option value="AeroPress">AeroPress</option>
                            <option value="French Press">French Press</option>
                            <option value="Mokapot">Mokapot</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newCoffeeEntry.BrewType)" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="grindSetting" class="form-label">Grind Setting (8-24)</label>
                        <InputNumber id="grindSetting" class="form-control" @bind-Value="newCoffeeEntry.GrindSetting" />
                        <ValidationMessage For="@(() => newCoffeeEntry.GrindSetting)" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Brew Time</label>
                        <div class="d-flex align-items-center">
                            <InputNumber class="form-control me-2" @bind-Value="newCoffeeEntry.BrewTimeMinutes" placeholder="Min" style="max-width: 70px;" />
                            <span class="me-2">:</span>
                            <InputNumber class="form-control" @bind-Value="newCoffeeEntry.BrewTimeSeconds" placeholder="Sec" style="max-width: 70px;" />
                        </div>
                        <small class="text-muted">mm:ss</small>
                        <ValidationMessage For="@(() => newCoffeeEntry.BrewTimeMinutes)" />
                        <ValidationMessage For="@(() => newCoffeeEntry.BrewTimeSeconds)" />
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Rating</label>
                <div class="star-rating">
                    @for (int i = 1; i <= 5; i++)
                    {
                        int starValue = i;
                        <span class="star @(starValue <= newCoffeeEntry.Rating ? "filled" : "")" 
                              @onclick="() => SetRating(starValue)">
                            ‚òÖ
                        </span>
                    }
                </div>
                <ValidationMessage For="@(() => newCoffeeEntry.Rating)" />
            </div>

            <button type="submit" class="btn btn-primary">Add Coffee Entry</button>
        </EditForm>
    </div>
</div>

<hr class="my-4" />

<h3>Coffee History</h3>

@if (coffeeEntries.Count == 0)
{
    <p><em>No coffee entries yet. Add your first one above!</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Date & Time</th>
                    <th>Coffee Name</th>
                    <th>Temperature (¬∞C)</th>
                    <th>Volume (ml)</th>
                    <th>Brew Type</th>
                    <th>Grind Setting</th>
                    <th>Brew Time</th>
                    <th>Rating</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in coffeeEntries.OrderByDescending(c => c.DateTime))
                {
                    <tr>
                        <td>@entry.DateTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@entry.CoffeeName</td>
                        <td>@entry.Temperature</td>
                        <td>@entry.Volume</td>
                        <td>@entry.BrewType</td>
                        <td>@entry.GrindSetting</td>
                        <td>@entry.FormattedBrewTime</td>
                        <td>
                            <div class="star-display">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= entry.Rating ? "filled" : "")">‚òÖ</span>
                                }
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCoffeeEntry(entry)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <div class="mt-3">
        <p><strong>Total entries:</strong> @coffeeEntries.Count</p>
        <p><strong>Total coffee consumed:</strong> @coffeeEntries.Sum(c => c.Volume) ml</p>
        @if (coffeeEntries.Count > 0)
        {
            <p><strong>Average rating:</strong> @coffeeEntries.Average(c => c.Rating).ToString("F1") stars</p>
            <p><strong>Average grind setting:</strong> @coffeeEntries.Average(c => c.GrindSetting).ToString("F1")</p>
            <p><strong>Average brew time:</strong> @TimeSpan.FromSeconds(coffeeEntries.Average(c => c.TotalBrewTimeSeconds)).ToString(@"m\:ss")</p>
        }
    </div>

    <div class="mt-4">
        <h5>‚òÅÔ∏è Cloud Sync</h5>
        <div class="btn-group" role="group">
            <button class="btn btn-primary" @onclick="SaveToCloud" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                üíæ Save to Cloud
            </button>
            <button class="btn btn-success" @onclick="LoadFromCloud" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                üì• Load from Cloud
            </button>
        </div>
        
        @if (!string.IsNullOrEmpty(syncMessage))
        {
            <div class="alert @(syncSuccess ? "alert-success" : "alert-danger") mt-2">
                @syncMessage
            </div>
        }
    </div>
}

@code {
    [Inject] public CoffeeService CoffeeService { get; set; } = default!;
    
    private CoffeeEntry newCoffeeEntry = new();
    private List<CoffeeEntry> coffeeEntries = new();
    
    // Cloud sync variables
    private bool isSaving = false;
    private bool isLoading = false;
    private string syncMessage = "";
    private bool syncSuccess = false;

    protected override void OnInitialized()
    {
        coffeeEntries = CoffeeService.GetAllCoffees();
        CoffeeService.OnCoffeeListChanged += RefreshCoffeeList;
    }

    private void RefreshCoffeeList()
    {
        coffeeEntries = CoffeeService.GetAllCoffees();
        InvokeAsync(StateHasChanged);
    }

    private void SetRating(int rating)
    {
        newCoffeeEntry.Rating = rating;
    }

    private void AddCoffeeEntry()
    {
        if (IsValidEntry(newCoffeeEntry))
        {
            var entry = new CoffeeEntry
            {
                Id = Guid.NewGuid(),
                CoffeeName = newCoffeeEntry.CoffeeName,
                Temperature = newCoffeeEntry.Temperature,
                Volume = newCoffeeEntry.Volume,
                BrewType = newCoffeeEntry.BrewType,
                Rating = newCoffeeEntry.Rating,
                GrindSetting = newCoffeeEntry.GrindSetting,
                BrewTimeMinutes = newCoffeeEntry.BrewTimeMinutes,
                BrewTimeSeconds = newCoffeeEntry.BrewTimeSeconds,
                DateTime = DateTime.Now
            };

            CoffeeService.AddCoffee(entry);
            
            // Reset the form
            newCoffeeEntry = new CoffeeEntry();
        }
    }

    private void DeleteCoffeeEntry(CoffeeEntry entry)
    {
        CoffeeService.RemoveCoffee(entry);
    }

    private bool IsValidEntry(CoffeeEntry entry)
    {
        return !string.IsNullOrWhiteSpace(entry.CoffeeName) &&
               entry.Temperature > 0 &&
               entry.Volume > 0 &&
               !string.IsNullOrWhiteSpace(entry.BrewType) &&
               entry.Rating > 0 &&
               entry.GrindSetting >= 8 && entry.GrindSetting <= 24 &&
               entry.BrewTimeMinutes >= 0 && entry.BrewTimeMinutes <= 59 &&
               entry.BrewTimeSeconds >= 0 && entry.BrewTimeSeconds <= 59;
    }

    // Cloud sync methods
    private async Task SaveToCloud()
    {
        isSaving = true;
        syncMessage = "";
        StateHasChanged();
        
        try
        {
            var success = await CoffeeService.SaveToCloudAsync();
            syncSuccess = success;
            syncMessage = success ? "‚úÖ Saved to cloud successfully!" : "‚ùå Failed to save to cloud";
        }
        catch (Exception ex)
        {
            syncSuccess = false;
            syncMessage = $"‚ùå Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
            
            // Clear message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(_ => {
                syncMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task LoadFromCloud()
    {
        isLoading = true;
        syncMessage = "";
        StateHasChanged();
        
        try
        {
            var success = await CoffeeService.LoadFromCloudAsync();
            syncSuccess = success;
            syncMessage = success ? "‚úÖ Loaded from cloud successfully!" : "‚ùå Failed to load from cloud";
            
            if (success)
            {
                RefreshCoffeeList();
            }
        }
        catch (Exception ex)
        {
            syncSuccess = false;
            syncMessage = $"‚ùå Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            
            // Clear message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(_ => {
                syncMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose()
    {
        CoffeeService.OnCoffeeListChanged -= RefreshCoffeeList;
    }
}