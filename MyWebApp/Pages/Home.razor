@page "/"
@using System.ComponentModel.DataAnnotations
@using MyWebApp.Services

<PageTitle>Home</PageTitle>

<h1>Welcome to My Web App!</h1>

<p>Track your daily coffee consumption and check your game dev news.</p>

<!-- Today's Weather Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">🌤️ Today's Weather</h5>
                <a href="/weather" class="btn btn-outline-primary btn-sm">7-Day Forecast</a>
            </div>
            <div class="card-body">
                @if (loadingWeather)
                {
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span>Loading weather...</span>
                    </div>
                }
                else if (currentWeather != null)
                {
                    <div class="row align-items-center">
                        <div class="col-md-3 text-center">
                            <div class="display-4 mb-2">@WeatherService.GetWeatherIcon(currentWeather.WeatherCode)</div>
                            <h4 class="mb-0">@Math.Round(currentWeather.Temperature, 1)°C</h4>
                            <p class="text-muted small mb-0">@currentWeather.WeatherDescription</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-2"><strong>📍 Location:</strong> @currentWeather.Location</p>
                            <p class="mb-2"><strong>💧 Humidity:</strong> @currentWeather.Humidity%</p>
                            <p class="mb-0"><strong>💨 Wind:</strong> @Math.Round(currentWeather.WindSpeed, 1) km/h</p>
                        </div>
                        <div class="col-md-3 text-center">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshWeather">
                                🔄 Refresh
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-muted text-center">
                        <p>Weather data unavailable</p>
                        <button class="btn btn-outline-primary btn-sm" @onclick="LoadWeatherData">
                            🔄 Try Again
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4>Quick Coffee Entry</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@newCoffeeEntry" OnValidSubmit="@AddCoffeeEntry">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="coffeeName" class="form-label">Coffee Name</label>
                                <InputText id="coffeeName" class="form-control" @bind-Value="newCoffeeEntry.CoffeeName" />
                                <ValidationMessage For="@(() => newCoffeeEntry.CoffeeName)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="temperature" class="form-label">Temperature (°C)</label>
                                <InputNumber id="temperature" class="form-control" @bind-Value="newCoffeeEntry.Temperature" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Temperature)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="volume" class="form-label">Volume (ml)</label>
                                <InputNumber id="volume" class="form-control" @bind-Value="newCoffeeEntry.Volume" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Volume)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="brewType" class="form-label">Brew Type</label>
                                <InputSelect id="brewType" class="form-control" @bind-Value="newCoffeeEntry.BrewType">
                                    <option value="">Select brew type...</option>
                                    <option value="V60">V60</option>
                                    <option value="AeroPress">AeroPress</option>
                                    <option value="French Press">French Press</option>
                                    <option value="Mokapot">Mokapot</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newCoffeeEntry.BrewType)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="grindSetting" class="form-label">Grind Setting</label>
                                <InputNumber id="grindSetting" class="form-control" @bind-Value="newCoffeeEntry.GrindSetting" placeholder="8-24" />
                                <ValidationMessage For="@(() => newCoffeeEntry.GrindSetting)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Brew Time</label>
                                <div class="d-flex align-items-center">
                                    <InputNumber class="form-control me-2" @bind-Value="newCoffeeEntry.BrewTimeMinutes" placeholder="Min" style="max-width: 60px;" />
                                    <span class="me-2">:</span>
                                    <InputNumber class="form-control" @bind-Value="newCoffeeEntry.BrewTimeSeconds" placeholder="Sec" style="max-width: 60px;" />
                                </div>
                                <small class="text-muted">mm:ss</small>
                                <ValidationMessage For="@(() => newCoffeeEntry.BrewTimeMinutes)" />
                                <ValidationMessage For="@(() => newCoffeeEntry.BrewTimeSeconds)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        int starValue = i;
                                        <span class="star @(starValue <= newCoffeeEntry.Rating ? "filled" : "")" 
                                              @onclick="() => SetRating(starValue)">
                                            ★
                                        </span>
                                    }
                                </div>
                                <ValidationMessage For="@(() => newCoffeeEntry.Rating)" />
                            </div>
                        </div>
                        <div class="col-md-6 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary w-100">Add Coffee Entry</button>
                        </div>
                    </div>
                </EditForm>

                @if (lastEntryAdded)
                {
                    <div class="alert alert-success mt-3" role="alert">
                        ☕ Coffee entry added successfully!
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>☕ Today's Coffee Stats</h5>
            </div>
            <div class="card-body">
                @{
                    var todaysCoffees = CoffeeService.GetTodaysCoffees();
                }
                
                @if (todaysCoffees.Count > 0)
                {
                    <p class="mb-2"><strong>Cups today:</strong> @todaysCoffees.Count</p>
                    <p class="mb-2"><strong>Total volume:</strong> @todaysCoffees.Sum(c => c.Volume) ml</p>
                    <p class="mb-2"><strong>Average rating:</strong> @todaysCoffees.Average(c => c.Rating).ToString("F1") ⭐</p>
                    <p class="mb-2"><strong>Average grind:</strong> @todaysCoffees.Average(c => c.GrindSetting).ToString("F1")</p>
                    <p class="mb-3"><strong>Average brew time:</strong> @TimeSpan.FromSeconds(todaysCoffees.Average(c => c.TotalBrewTimeSeconds)).ToString(@"m\:ss")</p>
                    
                    <hr />
                    <h6>Recent entries:</h6>
                    @foreach (var coffee in todaysCoffees.OrderByDescending(c => c.DateTime).Take(3))
                    {
                        <div class="small mb-2 border-bottom pb-2">
                            <strong>@coffee.CoffeeName</strong> - @coffee.BrewType
                            <div class="text-muted">
                                Grind: @coffee.GrindSetting | Time: @coffee.FormattedBrewTime
                            </div>
                            <div>
                                @for (int i = 1; i <= coffee.Rating; i++)
                                {
                                    <span class="text-warning">★</span>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No coffee entries for today yet!</p>
                    <p class="small">Add your first coffee above to start tracking.</p>
                }
                
                <hr />
                <a href="/coffee" class="btn btn-outline-primary btn-sm">View Full History</a>
            </div>
        </div>
    </div>
</div>

<!-- Latest Game Development News Section -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">🎮 Latest Game Development News</h5>
                <a href="/gamedev" class="btn btn-outline-primary btn-sm">View All News</a>
            </div>
            <div class="card-body">
                @if (loadingGameDevNews)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <p class="text-center mt-2">Loading latest game development news...</p>
                }
                else if (latestGameDevNews != null && latestGameDevNews.Count > 0)
                {
                    <div class="row">
                        @foreach (var article in latestGameDevNews.Take(3))
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body d-flex flex-column">
                                        <span class="badge bg-@GetSourceColorForHome(article.Source) mb-2 align-self-start">@article.Source</span>
                                        <h6 class="card-title">@article.Title</h6>
                                        <p class="card-text small text-muted flex-grow-1">@article.Description</p>
                                        <div class="d-flex justify-content-between align-items-center mt-auto">
                                            <small class="text-muted">@article.PublishDate.ToString("MMM dd")</small>
                                            <a href="@article.Link" class="btn btn-outline-primary btn-sm" target="_blank">Read More</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No game development news available at the moment.</p>
                    <p class="small">Check back later for the latest updates!</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] public CoffeeService CoffeeService { get; set; } = default!;
    [Inject] public GameDevNewsService GameDevNewsService { get; set; } = default!;
    [Inject] public WeatherService WeatherService { get; set; } = default!;
    
    private CoffeeEntry newCoffeeEntry = new();
    private bool lastEntryAdded = false;
    private bool loadingGameDevNews = true;
    private bool loadingWeather = true;
    private List<GameDevArticle>? latestGameDevNews;
    private CurrentWeather? currentWeather;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadLatestGameDevNews(),
            LoadWeatherData()
        );
    }

    private async Task LoadLatestGameDevNews()
    {
        try
        {
            loadingGameDevNews = true;
            var news = await GameDevNewsService.GetAllGameDevNewsAsync(3);
            Console.WriteLine($"Loaded {news?.Count ?? 0} game dev articles");
            
            if (news != null)
            {
                latestGameDevNews = news;
                Console.WriteLine("Game dev news loaded successfully");
            }
            else
            {
                Console.WriteLine("Game dev news was null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading latest game dev news: {ex.Message}");
        }
        finally
        {
            loadingGameDevNews = false;
            StateHasChanged();
        }
    }

    private void SetRating(int rating)
    {
        newCoffeeEntry.Rating = rating;
    }

    private async Task AddCoffeeEntry()
    {
        if (IsValidEntry(newCoffeeEntry))
        {
            var entry = new CoffeeEntry
            {
                Id = Guid.NewGuid(),
                CoffeeName = newCoffeeEntry.CoffeeName,
                Temperature = newCoffeeEntry.Temperature,
                Volume = newCoffeeEntry.Volume,
                BrewType = newCoffeeEntry.BrewType,
                Rating = newCoffeeEntry.Rating,
                GrindSetting = newCoffeeEntry.GrindSetting,
                BrewTimeMinutes = newCoffeeEntry.BrewTimeMinutes,
                BrewTimeSeconds = newCoffeeEntry.BrewTimeSeconds,
                DateTime = DateTime.Now
            };

            CoffeeService.AddCoffee(entry);
            
            // Reset the form
            newCoffeeEntry = new CoffeeEntry();
            lastEntryAdded = true;
            
            // Hide success message after 3 seconds
            await Task.Delay(3000);
            lastEntryAdded = false;
            StateHasChanged();
        }
    }

    private bool IsValidEntry(CoffeeEntry entry)
    {
        return !string.IsNullOrWhiteSpace(entry.CoffeeName) &&
               entry.Temperature > 0 &&
               entry.Volume > 0 &&
               !string.IsNullOrWhiteSpace(entry.BrewType) &&
               entry.Rating > 0 &&
               entry.GrindSetting >= 8 && entry.GrindSetting <= 24 &&
               entry.BrewTimeMinutes >= 0 && entry.BrewTimeMinutes <= 59 &&
               entry.BrewTimeSeconds >= 0 && entry.BrewTimeSeconds <= 59;
    }

    private string GetSourceColorForHome(string source)
    {
        return source switch
        {
            "Eurogamer" => "success",
            "Game Developer" => "info",
            _ => "secondary"
        };
    }

    private async Task LoadWeatherData()
    {
        try
        {
            loadingWeather = true;
            currentWeather = await WeatherService.GetCurrentWeatherAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather data: {ex.Message}");
        }
        finally
        {
            loadingWeather = false;
            StateHasChanged();
        }
    }

    private async Task RefreshWeather()
    {
        await LoadWeatherData();
    }
}