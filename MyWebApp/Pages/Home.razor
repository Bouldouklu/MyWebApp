@page "/"
@using System.ComponentModel.DataAnnotations
@using MyWebApp.Services

<PageTitle>Home</PageTitle>

<h1>Welcome to Coffee Logger!</h1>

<p>Track your daily coffee consumption and rate your brews.</p>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4>Quick Coffee Entry</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@newCoffeeEntry" OnValidSubmit="@AddCoffeeEntry">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="coffeeName" class="form-label">Coffee Name</label>
                                <InputText id="coffeeName" class="form-control" @bind-Value="newCoffeeEntry.CoffeeName" />
                                <ValidationMessage For="@(() => newCoffeeEntry.CoffeeName)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="temperature" class="form-label">Temperature (°C)</label>
                                <InputNumber id="temperature" class="form-control" @bind-Value="newCoffeeEntry.Temperature" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Temperature)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="volume" class="form-label">Volume (ml)</label>
                                <InputNumber id="volume" class="form-control" @bind-Value="newCoffeeEntry.Volume" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Volume)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="brewType" class="form-label">Brew Type</label>
                                <InputSelect id="brewType" class="form-control" @bind-Value="newCoffeeEntry.BrewType">
                                    <option value="">Select brew type...</option>
                                    <option value="V60">V60</option>
                                    <option value="AeroPress">AeroPress</option>
                                    <option value="French Press">French Press</option>
                                    <option value="Mokapot">Mokapot</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newCoffeeEntry.BrewType)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        int starValue = i;
                                        <span class="star @(starValue <= newCoffeeEntry.Rating ? "filled" : "")" 
                                              @onclick="() => SetRating(starValue)">
                                            ★
                                        </span>
                                    }
                                </div>
                                <ValidationMessage For="@(() => newCoffeeEntry.Rating)" />
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <button type="submit" class="btn btn-primary">Add Coffee Entry</button>
                        @if (lastEntryAdded)
                        {
                            <div class="text-success">
                                <i class="bi bi-check-circle"></i> Coffee entry added successfully!
                            </div>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card mb-3">
            <div class="card-header">
                <h5>📍 Current Weather</h5>
            </div>
            <div class="card-body">
                @if (currentWeather != null)
                {
                    <div class="text-center">
                        <div class="display-6">@WeatherService.GetWeatherIcon(currentWeather.WeatherCode)</div>
                        <h4>@Math.Round(currentWeather.Temperature, 1)°C</h4>
                        <p class="text-muted mb-2">@currentWeather.WeatherDescription</p>
                        <small class="text-muted">@currentWeather.Location</small>
                        
                        <hr class="my-2" />
                        
                        <div class="row text-center">
                            <div class="col-4">
                                <small class="text-muted d-block">Humidity</small>
                                <strong>@currentWeather.Humidity%</strong>
                            </div>
                            <div class="col-4">
                                <small class="text-muted d-block">Wind</small>
                                <strong>@Math.Round(currentWeather.WindSpeed, 1) km/h</strong>
                            </div>
                            <div class="col-4">
                                <a href="/weather" class="btn btn-outline-primary btn-sm">7-Day</a>
                            </div>
                        </div>
                    </div>
                }
                else if (loadingWeather)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 mb-0">Loading weather...</p>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>Weather data unavailable</p>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="LoadWeatherData">
                            Try Again
                        </button>
                    </div>
                }
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5>☕ Today's Stats</h5>
            </div>
            <div class="card-body">
                @if (CoffeeService.GetTodaysCoffees().Any())
                {
                    var todaysCoffees = CoffeeService.GetTodaysCoffees();
                    <p><strong>Coffees today:</strong> @todaysCoffees.Count()</p>
                    <p><strong>Total volume:</strong> @todaysCoffees.Sum(c => c.Volume) ml</p>
                    <p><strong>Average rating:</strong> @todaysCoffees.Average(c => c.Rating).ToString("F1") ⭐</p>
                    
                    <hr />
                    <h6>Recent entries:</h6>
                    @foreach (var coffee in todaysCoffees.OrderByDescending(c => c.DateTime).Take(3))
                    {
                        <div class="small mb-1">
                            <strong>@coffee.CoffeeName</strong> - @coffee.BrewType
                            <div>
                                @for (int i = 1; i <= coffee.Rating; i++)
                                {
                                    <span class="text-warning">★</span>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No coffee entries for today yet!</p>
                    <p class="small">Add your first coffee above to start tracking.</p>
                }
                
                <hr />
                <a href="/coffee" class="btn btn-outline-primary btn-sm">View Full History</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] public CoffeeService CoffeeService { get; set; } = default!;
    [Inject] public WeatherService WeatherService { get; set; } = default!;
    
    private CoffeeEntry newCoffeeEntry = new();
    private bool lastEntryAdded = false;
    private CurrentWeather? currentWeather;
    private bool loadingWeather = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        loadingWeather = true;
        StateHasChanged();
        
        currentWeather = await WeatherService.GetCurrentWeatherAsync();
        loadingWeather = false;
        StateHasChanged();
    }

    private void SetRating(int rating)
    {
        newCoffeeEntry.Rating = rating;
    }

    private async Task AddCoffeeEntry()
    {
        if (IsValidEntry(newCoffeeEntry))
        {
            var entry = new CoffeeEntry
            {
                Id = Guid.NewGuid(),
                CoffeeName = newCoffeeEntry.CoffeeName,
                Temperature = newCoffeeEntry.Temperature,
                Volume = newCoffeeEntry.Volume,
                BrewType = newCoffeeEntry.BrewType,
                Rating = newCoffeeEntry.Rating,
                DateTime = DateTime.Now
            };

            CoffeeService.AddCoffee(entry);
            
            // Reset the form
            newCoffeeEntry = new CoffeeEntry();
            lastEntryAdded = true;
            
            // Hide success message after 3 seconds
            await Task.Delay(3000);
            lastEntryAdded = false;
            StateHasChanged();
        }
    }

    private bool IsValidEntry(CoffeeEntry entry)
    {
        return !string.IsNullOrWhiteSpace(entry.CoffeeName) &&
               entry.Temperature > 0 &&
               entry.Volume > 0 &&
               !string.IsNullOrWhiteSpace(entry.BrewType) &&
               entry.Rating > 0;
    }
}