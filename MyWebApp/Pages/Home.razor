@page "/"
@using System.ComponentModel.DataAnnotations
@using MyWebApp.Services

<PageTitle>Home</PageTitle>

<h1>Welcome to Coffee Logger!</h1>

<p>Track your daily coffee consumption and rate your brews.</p>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4>Quick Coffee Entry</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@newCoffeeEntry" OnValidSubmit="@AddCoffeeEntry">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="coffeeName" class="form-label">Coffee Name</label>
                                <InputText id="coffeeName" class="form-control" @bind-Value="newCoffeeEntry.CoffeeName" />
                                <ValidationMessage For="@(() => newCoffeeEntry.CoffeeName)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="temperature" class="form-label">Temperature (°C)</label>
                                <InputNumber id="temperature" class="form-control" @bind-Value="newCoffeeEntry.Temperature" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Temperature)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="volume" class="form-label">Volume (ml)</label>
                                <InputNumber id="volume" class="form-control" @bind-Value="newCoffeeEntry.Volume" />
                                <ValidationMessage For="@(() => newCoffeeEntry.Volume)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="brewType" class="form-label">Brew Type</label>
                                <InputSelect id="brewType" class="form-control" @bind-Value="newCoffeeEntry.BrewType">
                                    <option value="">Select brew type...</option>
                                    <option value="V60">V60</option>
                                    <option value="AeroPress">AeroPress</option>
                                    <option value="French Press">French Press</option>
                                    <option value="Mokapot">Mokapot</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newCoffeeEntry.BrewType)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        int starValue = i;
                                        <span class="star @(starValue <= newCoffeeEntry.Rating ? "filled" : "")" 
                                              @onclick="() => SetRating(starValue)">
                                            ★
                                        </span>
                                    }
                                </div>
                                <ValidationMessage For="@(() => newCoffeeEntry.Rating)" />
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <button type="submit" class="btn btn-primary">Add Coffee Entry</button>
                        @if (lastEntryAdded)
                        {
                            <div class="text-success">
                                <i class="bi bi-check-circle"></i> Coffee entry added successfully!
                            </div>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card mb-3">
            <div class="card-header">
                <h5>📍 Current Weather</h5>
            </div>
            <div class="card-body">
                @if (currentWeather != null)
                {
                    <div class="text-center">
                        <div class="display-6">@WeatherService.GetWeatherIcon(currentWeather.WeatherCode)</div>
                        <h4>@Math.Round(currentWeather.Temperature, 1)°C</h4>
                        <p class="text-muted mb-2">@currentWeather.WeatherDescription</p>
                        <small class="text-muted">@currentWeather.Location</small>
                        
                        <hr class="my-2" />
                        
                        <div class="row text-center">
                            <div class="col-4">
                                <small class="text-muted d-block">Humidity</small>
                                <strong>@currentWeather.Humidity%</strong>
                            </div>
                            <div class="col-4">
                                <small class="text-muted d-block">Wind</small>
                                <strong>@Math.Round(currentWeather.WindSpeed, 1) km/h</strong>
                            </div>
                            <div class="col-4">
                                <a href="/weather" class="btn btn-outline-primary btn-sm">7-Day</a>
                            </div>
                        </div>
                    </div>
                }
                else if (loadingWeather)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 mb-0">Loading weather...</p>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>Weather data unavailable</p>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="LoadWeatherData">
                            Try Again
                        </button>
                    </div>
                }
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5>☕ Today's Stats</h5>
            </div>
            <div class="card-body">
                @if (CoffeeService.GetTodaysCoffees().Any())
                {
                    var todaysCoffees = CoffeeService.GetTodaysCoffees();
                    <p><strong>Coffees today:</strong> @todaysCoffees.Count()</p>
                    <p><strong>Total volume:</strong> @todaysCoffees.Sum(c => c.Volume) ml</p>
                    <p><strong>Average rating:</strong> @todaysCoffees.Average(c => c.Rating).ToString("F1") ⭐</p>
                    
                    <hr />
                    <h6>Recent entries:</h6>
                    @foreach (var coffee in todaysCoffees.OrderByDescending(c => c.DateTime).Take(3))
                    {
                        <div class="small mb-1">
                            <strong>@coffee.CoffeeName</strong> - @coffee.BrewType
                            <div>
                                @for (int i = 1; i <= coffee.Rating; i++)
                                {
                                    <span class="text-warning">★</span>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No coffee entries for today yet!</p>
                    <p class="small">Add your first coffee above to start tracking.</p>
                }
                
                <hr />
                <a href="/coffee" class="btn btn-outline-primary btn-sm">View Full History</a>
            </div>
        </div>
    </div>
</div>

<!-- Latest Game Reviews Section -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">🎮 Latest IGN Game Reviews</h5>
                <a href="/reviews" class="btn btn-outline-primary btn-sm">View All →</a>
            </div>
            <div class="card-body">
                @if (latestReviews?.Any() == true)
                {
                    <div class="row">
                        @foreach (var review in latestReviews.Take(4))
                        {
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 mb-3">
                                <div class="card h-100 border-0 shadow-sm">
                                    @if (!string.IsNullOrEmpty(review.Thumbnail))
                                    {
                                        <img src="@review.Thumbnail" class="card-img-top" alt="@review.Title" style="height: 160px; object-fit: cover;" />
                                    }
                                    else
                                    {
                                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 160px;">
                                            <span class="text-muted display-6">🎮</span>
                                        </div>
                                    }
                                    <div class="card-body p-3">
                                        <h6 class="card-title">
                                            <a href="@review.Link" target="_blank" class="text-decoration-none">
                                                @(review.Title.Length > 45 ? review.Title.Substring(0, 45) + "..." : review.Title)
                                            </a>
                                        </h6>
                                        
                                        @if (review.Score > 0)
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="badge bg-@IGNReviewsService.GetScoreColor(review.Score)">
                                                    @review.Score.ToString("F1")/10
                                                </span>
                                                <small class="text-muted">@review.ScoreText</small>
                                            </div>
                                        }
                                        
                                        <p class="card-text small text-muted">
                                            @(review.Description.Length > 80 ? review.Description.Substring(0, 80) + "..." : review.Description)
                                        </p>
                                        
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                @if (!string.IsNullOrEmpty(review.Genre))
                                                {
                                                    <span class="badge bg-secondary">
                                                        @IGNReviewsService.GetGenreIcon(review.Genre)
                                                    </span>
                                                }
                                            </div>
                                            <small class="text-muted">@IGNReviewsService.GetTimeAgo(review.PublishDate)</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (loadingReviews)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading latest game reviews...</span>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>Unable to load reviews at the moment</p>
                        <p class="small">Check console for debug info</p>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="LoadLatestReviews">
                            🔄 Retry
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Latest News Section -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">📰 Latest TechSpot News</h5>
                <a href="/news" class="btn btn-outline-primary btn-sm">View All →</a>
            </div>
            <div class="card-body">
                @if (latestNews?.Any() == true)
                {
                    <div class="row">
                        @foreach (var article in latestNews.Take(6))
                        {
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mb-3">
                                <div class="card h-100 border-0 shadow-sm">
                                    @if (!string.IsNullOrEmpty(article.Thumbnail))
                                    {
                                        <img src="@article.Thumbnail" class="card-img-top" alt="@article.Title" style="height: 120px; object-fit: cover;" />
                                    }
                                    <div class="card-body p-3">
                                        <h6 class="card-title">
                                            <a href="@article.Link" target="_blank" class="text-decoration-none">
                                                @(article.Title.Length > 50 ? article.Title.Substring(0, 50) + "..." : article.Title)
                                            </a>
                                        </h6>
                                        <p class="card-text small text-muted">
                                            @(article.Description.Length > 60 ? article.Description.Substring(0, 60) + "..." : article.Description)
                                        </p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">@NewsService.GetTimeAgo(article.PublishDate)</small>
                                            @if (article.Categories.Any())
                                            {
                                                <span class="badge bg-secondary">
                                                    @NewsService.GetCategoryIcon(article.Categories.First())
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (loadingNews)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading latest tech news...</span>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>Unable to load news at the moment</p>
                        <p class="small">Check console for debug info</p>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="LoadLatestNews">
                            🔄 Retry
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] public CoffeeService CoffeeService { get; set; } = default!;
    [Inject] public WeatherService WeatherService { get; set; } = default!;
    [Inject] public NewsService NewsService { get; set; } = default!;
    [Inject] public IGNReviewsService IGNReviewsService { get; set; } = default!;
    
    private CoffeeEntry newCoffeeEntry = new();
    private bool lastEntryAdded = false;
    private CurrentWeather? currentWeather;
    private bool loadingWeather = true;
    private List<NewsArticle> latestNews = new();
    private bool loadingNews = true;
    private List<GameReview> latestReviews = new();
    private bool loadingReviews = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadWeatherData(), LoadLatestNews(), LoadLatestReviews());
    }

    private async Task LoadWeatherData()
    {
        loadingWeather = true;
        StateHasChanged();
        
        currentWeather = await WeatherService.GetCurrentWeatherAsync();
        loadingWeather = false;
        StateHasChanged();
    }

    private async Task LoadLatestNews()
    {
        try
        {
            loadingNews = true;
            StateHasChanged();
            
            Console.WriteLine("Starting to load latest news...");
            var news = await NewsService.GetLatestNewsAsync(6);
            Console.WriteLine($"Received {news?.Count ?? 0} news articles");
            
            if (news != null)
            {
                latestNews = news;
                Console.WriteLine("News loaded successfully");
            }
            else
            {
                Console.WriteLine("News was null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading latest news: {ex.Message}");
        }
        finally
        {
            loadingNews = false;
            StateHasChanged();
        }
    }

    private async Task LoadLatestReviews()
    {
        try
        {
            loadingReviews = true;
            StateHasChanged();
            
            Console.WriteLine("Starting to load latest reviews...");
            var reviews = await IGNReviewsService.GetLatestReviewsAsync(4);
            Console.WriteLine($"Received {reviews?.Count ?? 0} game reviews");
            
            if (reviews != null)
            {
                latestReviews = reviews;
                Console.WriteLine("Reviews loaded successfully");
            }
            else
            {
                Console.WriteLine("Reviews was null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading latest reviews: {ex.Message}");
        }
        finally
        {
            loadingReviews = false;
            StateHasChanged();
        }
    }

    private void SetRating(int rating)
    {
        newCoffeeEntry.Rating = rating;
    }

    private async Task AddCoffeeEntry()
    {
        if (IsValidEntry(newCoffeeEntry))
        {
            var entry = new CoffeeEntry
            {
                Id = Guid.NewGuid(),
                CoffeeName = newCoffeeEntry.CoffeeName,
                Temperature = newCoffeeEntry.Temperature,
                Volume = newCoffeeEntry.Volume,
                BrewType = newCoffeeEntry.BrewType,
                Rating = newCoffeeEntry.Rating,
                DateTime = DateTime.Now
            };

            CoffeeService.AddCoffee(entry);
            
            // Reset the form
            newCoffeeEntry = new CoffeeEntry();
            lastEntryAdded = true;
            
            // Hide success message after 3 seconds
            await Task.Delay(3000);
            lastEntryAdded = false;
            StateHasChanged();
        }
    }

    private bool IsValidEntry(CoffeeEntry entry)
    {
        return !string.IsNullOrWhiteSpace(entry.CoffeeName) &&
               entry.Temperature > 0 &&
               entry.Volume > 0 &&
               !string.IsNullOrWhiteSpace(entry.BrewType) &&
               entry.Rating > 0;
    }
}