@page "/reviews"
@using MyWebApp.Services

<PageTitle>IGN Game Reviews</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>üéÆ IGN Game Reviews</h1>
    <button class="btn btn-outline-primary" @onclick="RefreshReviews" disabled="@loadingReviews">
        @if (loadingReviews)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        }
        else
        {
            <span>üîÑ</span>
        }
        Refresh
    </button>
</div>

@if (gameReviews?.Any() == true)
{
    <div class="row">
        @foreach (var review in gameReviews)
        {
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 mb-4">
                <div class="card h-100 shadow-sm">
                    @if (!string.IsNullOrEmpty(review.Thumbnail))
                    {
                        <img src="@review.Thumbnail" 
                             class="card-img-top" 
                             alt="@review.Title" 
                             style="height: 200px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                            <span class="text-muted display-4">üéÆ</span>
                        </div>
                    }
                    
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">
                            <a href="@review.Link" target="_blank" class="text-decoration-none">
                                @review.Title
                            </a>
                        </h5>
                        
                        <p class="card-text text-muted small flex-grow-1">
                            @review.Description
                        </p>
                        
                        <div class="mt-auto">
                            <!-- Score Badge -->
                            @if (review.Score > 0)
                            {
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="badge bg-@IGNReviewsService.GetScoreColor(review.Score) fs-6">
                                        @review.Score.ToString("F1")/10
                                    </span>
                                    <span class="badge bg-secondary">
                                        @review.ScoreText
                                    </span>
                                </div>
                            }
                            
                            <!-- Platform and Genre -->
                            <div class="mb-2">
                                @if (!string.IsNullOrEmpty(review.Platform))
                                {
                                    <span class="badge bg-info me-1">
                                        üéØ @review.Platform
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(review.Genre))
                                {
                                    <span class="badge bg-dark me-1">
                                        @IGNReviewsService.GetGenreIcon(review.Genre) @review.Genre
                                    </span>
                                }
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    üìÖ @IGNReviewsService.GetTimeAgo(review.PublishDate)
                                </small>
                                <small class="text-muted">
                                    ‚úçÔ∏è @review.Author
                                </small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-footer bg-transparent border-0">
                        <a href="@review.Link" target="_blank" class="btn btn-primary btn-sm w-100">
                            Read Review ‚Üí
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Load More Button -->
    <div class="text-center mt-4">
        <button class="btn btn-outline-secondary" @onclick="LoadMoreReviews" disabled="@loadingMore">
            @if (loadingMore)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <text>Loading</text>
            }
            else
            {
                <text>Load More Reviews</text>
            }
        </button>
    </div>
    
    <!-- Review Stats -->
    <div class="row mt-5">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üìä Reviews Loaded</h5>
                    <p class="card-text display-6">@gameReviews.Count</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">‚≠ê Average Score</h5>
                    <p class="card-text display-6">
                        @if (gameReviews.Any(r => r.Score > 0))
                        {
                            @gameReviews.Where(r => r.Score > 0).Average(r => r.Score).ToString("F1")
                        }
                        else
                        {
                            <span class="fs-6">N/A</span>
                        }
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üìà Latest Review</h5>
                    <p class="card-text">
                        @if (gameReviews.Any())
                        {
                            @IGNReviewsService.GetTimeAgo(gameReviews.OrderByDescending(r => r.PublishDate).First().PublishDate)
                        }
                        else
                        {
                            <span>No reviews</span>
                        }
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üî• Top Genres</h5>
                    <p class="card-text">
                        @{
                            var topGenres = gameReviews
                                .Where(r => !string.IsNullOrEmpty(r.Genre))
                                .GroupBy(r => r.Genre)
                                .OrderByDescending(g => g.Count())
                                .Take(3)
                                .Select(g => g.Key);
                        }
                        @string.Join(", ", topGenres)
                    </p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Score Distribution -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üìà Score Distribution</h5>
                </div>
                <div class="card-body">
                    @{
                        var scoredReviews = gameReviews.Where(r => r.Score > 0).ToList();
                        var amazing = scoredReviews.Count(r => r.Score >= 9.0f);
                        var great = scoredReviews.Count(r => r.Score >= 8.0f && r.Score < 9.0f);
                        var good = scoredReviews.Count(r => r.Score >= 7.0f && r.Score < 8.0f);
                        var okay = scoredReviews.Count(r => r.Score >= 6.0f && r.Score < 7.0f);
                        var poor = scoredReviews.Count(r => r.Score < 6.0f);
                    }
                    
                    <div class="row text-center">
                        <div class="col">
                            <h6 class="text-success">Amazing (9.0+)</h6>
                            <span class="badge bg-success fs-6">@amazing</span>
                        </div>
                        <div class="col">
                            <h6 class="text-primary">Great (8.0-8.9)</h6>
                            <span class="badge bg-primary fs-6">@great</span>
                        </div>
                        <div class="col">
                            <h6 class="text-info">Good (7.0-7.9)</h6>
                            <span class="badge bg-info fs-6">@good</span>
                        </div>
                        <div class="col">
                            <h6 class="text-warning">Okay (6.0-6.9)</h6>
                            <span class="badge bg-warning fs-6">@okay</span>
                        </div>
                        <div class="col">
                            <h6 class="text-danger">Poor (&lt;6.0)</h6>
                            <span class="badge bg-danger fs-6">@poor</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (loadingReviews)
{
    <div class="text-center my-5">
        <div class="spinner-border mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h4>Loading IGN Game Reviews...</h4>
        <p class="text-muted">Fetching the latest game reviews for you</p>
    </div>
}
else
{
    <div class="text-center my-5">
        <div class="alert alert-warning">
            <h4>üéÆ Unable to Load Reviews</h4>
            <p>We couldn't fetch the latest IGN game reviews. This might be due to:</p>
            <ul class="text-start">
                <li>Internet connection issues</li>
                <li>IGN RSS feed temporarily unavailable</li>
                <li>RSS to JSON service rate limits</li>
            </ul>
            <button class="btn btn-primary mt-3" @onclick="RefreshReviews">
                üîÑ Try Again
            </button>
        </div>
        
        <!-- Fallback Content -->
        <div class="card mt-4">
            <div class="card-body">
                <h5>üéÆ About IGN Reviews</h5>
                <p class="text-muted">
                    IGN is one of the world's largest gaming and entertainment media companies, 
                    providing expert reviews, previews, and analysis of the latest video games 
                    across all platforms. Their review scores are highly regarded in the gaming community.
                </p>
                <a href="https://www.ign.com/reviews/games" target="_blank" class="btn btn-outline-primary">
                    Visit IGN Reviews ‚Üí
                </a>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public IGNReviewsService IGNReviewsService { get; set; } = default!;
    
    private List<GameReview> gameReviews = new();
    private bool loadingReviews = true;
    private bool loadingMore = false;
    private int currentCount = 12;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        loadingReviews = true;
        StateHasChanged();
        
        var reviews = await IGNReviewsService.GetIGNReviewsAsync(currentCount);
        if (reviews != null)
        {
            gameReviews = reviews;
        }
        
        loadingReviews = false;
        StateHasChanged();
    }

    private async Task RefreshReviews()
    {
        currentCount = 12; // Reset count
        await LoadReviews();
    }

    private async Task LoadMoreReviews()
    {
        loadingMore = true;
        StateHasChanged();
        
        currentCount += 12; // Load 12 more reviews
        var reviews = await IGNReviewsService.GetIGNReviewsAsync(currentCount);
        if (reviews != null)
        {
            gameReviews = reviews;
        }
        
        loadingMore = false;
        StateHasChanged();
    }
}