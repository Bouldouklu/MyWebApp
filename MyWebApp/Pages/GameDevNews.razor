@page "/gamedev"
@using MyWebApp.Services

<PageTitle>Game Development News</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>üéÆ Game Development News</h1>
    <button class="btn btn-outline-primary" @onclick="RefreshAllNews" disabled="@loadingNews">
        @if (loadingNews)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        }
        else
        {
            <span>üîÑ</span>
        }
        Refresh All
    </button>
</div>

<!-- Filter Tabs -->
<ul class="nav nav-tabs mb-4">
    <li class="nav-item">
        <button class="nav-link @(activeFilter == "all" ? "active" : "")" @onclick="SetFilterAll">
            üì∞ All News (@allArticles.Count)
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(activeFilter == "eurogamer" ? "active" : "")" @onclick="SetFilterEurogamer">
            üéÆ Eurogamer (@GetFilteredArticles("Eurogamer").Count())
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(activeFilter == "gamedeveloper" ? "active" : "")" @onclick="SetFilterGameDeveloper">
            üìä Game Developer (@GetFilteredArticles("Game Developer").Count())
        </button>
    </li>
</ul>

@if (GetCurrentArticles().Any())
{
    <div class="row">
        @foreach (var article in GetCurrentArticles())
        {
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 mb-4">
                <div class="card h-100 shadow-sm">
                    @if (!string.IsNullOrEmpty(article.Thumbnail))
                    {
                        <img src="@article.Thumbnail" 
                             class="card-img-top" 
                             alt="@article.Title" 
                             style="height: 180px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 180px;">
                            <span class="text-muted display-4">@GameDevNewsService.GetSourceIcon(article.Source)</span>
                        </div>
                    }
                    
                    <div class="card-body d-flex flex-column">
                        <!-- Source Badge -->
                        <div class="mb-2">
                            <span class="badge bg-@GetSourceColor(article.Source)">
                                @GameDevNewsService.GetSourceIcon(article.Source) @article.Source
                            </span>
                        </div>
                        
                        <h5 class="card-title">
                            <a href="@article.Link" target="_blank" class="text-decoration-none">
                                @article.Title
                            </a>
                        </h5>
                        
                        <p class="card-text text-muted small flex-grow-1">
                            @article.Description
                        </p>
                        
                        <div class="mt-auto">
                            <!-- Categories -->
                            @if (article.Categories.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var category in article.Categories.Take(2))
                                    {
                                        <span class="badge bg-secondary me-1">
                                            @category
                                        </span>
                                    }
                                </div>
                            }
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    üìÖ @GameDevNewsService.GetTimeAgo(article.PublishDate)
                                </small>
                                <small class="text-muted">
                                    ‚úçÔ∏è @article.Author
                                </small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-footer bg-transparent border-0">
                        <a href="@article.Link" target="_blank" class="btn btn-primary btn-sm w-100">
                            Read Article ‚Üí
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Load More Button -->
    @if (canLoadMore)
    {
        <div class="text-center mt-4">
            <button class="btn btn-outline-secondary" @onclick="LoadMoreArticles" disabled="@loadingMore">
                @if (loadingMore)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <text>Loading</text>
                }
                else
                {
                    <text>Load More Articles</text>
                }
            </button>
        </div>
    }
    
    <!-- News Statistics -->
    <div class="row mt-5">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üìä Total Articles</h5>
                    <p class="card-text display-6">@allArticles.Count</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üìà Latest Article</h5>
                    <p class="card-text">
                        @if (allArticles.Any())
                        {
                            @GameDevNewsService.GetTimeAgo(allArticles.OrderByDescending(a => a.PublishDate).First().PublishDate)
                        }
                        else
                        {
                            <span>No articles</span>
                        }
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">üéÆ Gaming Articles</h5>
                    <p class="card-text display-6">@(GetFilteredArticles("Eurogamer").Count() + GetFilteredArticles("Game Developer").Count())</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Source Breakdown -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üìä Articles by Source</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-6">
                            <h6 class="text-success">üéÆ Eurogamer</h6>
                            <p class="display-6">@GetFilteredArticles("Eurogamer").Count()</p>
                            <small class="text-muted">Gaming News & Reviews</small>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-info">üìä Game Developer</h6>
                            <p class="display-6">@GetFilteredArticles("Game Developer").Count()</p>
                            <small class="text-muted">Industry & Business</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Top Categories -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üè∑Ô∏è Top Categories</h5>
                </div>
                <div class="card-body">
                    @{
                        var topCategories = allArticles
                            .SelectMany(a => a.Categories)
                            .GroupBy(c => c)
                            .OrderByDescending(g => g.Count())
                            .Take(8)
                            .ToList();
                    }
                    
                    @if (topCategories.Any())
                    {
                        <div class="row">
                            @foreach (var categoryGroup in topCategories)
                            {
                                <div class="col-md-3 col-sm-6 mb-2">
                                    <div class="d-flex justify-content-between align-items-center p-2 bg-light rounded">
                                        <span class="fw-bold">@categoryGroup.Key</span>
                                        <span class="badge bg-primary">@categoryGroup.Count()</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No categories available</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
else if (loadingNews)
{
    <div class="text-center my-5">
        <div class="spinner-border mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h4>Loading Game Development News...</h4>
        <p class="text-muted">Fetching the latest articles from Unity, Eurogamer, and Game Developer</p>
        
        <!-- Loading Progress -->
        <div class="row mt-4">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h6>üîß Unity</h6>
                        <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                        <p class="small mt-2">Loading Unity articles...</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h6>üéÆ Eurogamer</h6>
                        <div class="spinner-border spinner-border-sm text-success" role="status"></div>
                        <p class="small mt-2">Loading Eurogamer articles...</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h6>üìä Game Developer</h6>
                        <div class="spinner-border spinner-border-sm text-info" role="status"></div>
                        <p class="small mt-2">Loading Game Developer articles...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center my-5">
        <div class="alert alert-warning">
            <h4>üì° Unable to Load Game Development News</h4>
            <p>We couldn't fetch the latest articles from the game development sources. This might be due to:</p>
            <ul class="text-start">
                <li>Internet connection issues</li>
                <li>RSS feeds temporarily unavailable</li>
                <li>CORS proxy service rate limits</li>
                <li>RSS feed format changes</li>
            </ul>
            <button class="btn btn-primary mt-3" @onclick="RefreshAllNews">
                üîÑ Try Again
            </button>
        </div>
        
        <!-- Fallback Content -->
        <div class="row mt-4">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5>üîß Unity</h5>
                        <p class="text-muted">
                            Unity is the leading game development platform used by millions of developers worldwide.
                            Stay updated with the latest engine features, tools, and community content.
                        </p>
                        <a href="https://blog.unity.com/" target="_blank" class="btn btn-outline-primary">
                            Visit Unity Blog ‚Üí
                        </a>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5>üéÆ Eurogamer</h5>
                        <p class="text-muted">
                            Eurogamer is Europe's leading independent gaming website, providing news, reviews, 
                            and analysis of the video game industry.
                        </p>
                        <a href="https://www.eurogamer.net/" target="_blank" class="btn btn-outline-success">
                            Visit Eurogamer ‚Üí
                        </a>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5>üìä Game Developer</h5>
                        <p class="text-muted">
                            Game Developer magazine is the industry resource for breaking news and analysis 
                            of game development technology and business trends.
                        </p>
                        <a href="https://www.gamedeveloper.com/" target="_blank" class="btn btn-outline-info">
                            Visit Game Developer ‚Üí
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public GameDevNewsService GameDevNewsService { get; set; } = default!;
    
    private List<GameDevArticle> allArticles = new();
    private bool loadingNews = true;
    private bool loadingMore = false;
    private string activeFilter = "all";
    private int articlesPerPage = 12;
    private int currentPage = 1;
    private bool canLoadMore = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllNews();
    }

    private async Task LoadAllNews()
    {
        loadingNews = true;
        StateHasChanged();
        
        try
        {
            Console.WriteLine("Starting to load all game development news...");
            var articles = await GameDevNewsService.GetAllGameDevNewsAsync(8);
            Console.WriteLine($"Received {articles?.Count ?? 0} total articles");
            
            if (articles != null)
            {
                allArticles = articles;
                Console.WriteLine("All articles loaded successfully");
                UpdateCanLoadMore();
            }
            else
            {
                Console.WriteLine("Articles was null");
                allArticles = new List<GameDevArticle>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading all news: {ex.Message}");
            allArticles = new List<GameDevArticle>();
        }
        finally
        {
            loadingNews = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAllNews()
    {
        currentPage = 1;
        await LoadAllNews();
    }

    private void SetFilter(string filter)
    {
        activeFilter = filter;
        currentPage = 1;
        UpdateCanLoadMore();
        StateHasChanged();
    }

    private void SetFilterAll() => SetFilter("all");
    private void SetFilterEurogamer() => SetFilter("eurogamer");
    private void SetFilterGameDeveloper() => SetFilter("gamedeveloper");

    private IEnumerable<GameDevArticle> GetFilteredArticles(string source)
    {
        return allArticles.Where(a => a.Source.Equals(source, StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<GameDevArticle> GetCurrentArticles()
    {
        var filteredArticles = activeFilter switch
        {
            "eurogamer" => GetFilteredArticles("Eurogamer"),
            "gamedeveloper" => GetFilteredArticles("Game Developer"),
            _ => allArticles
        };

        return filteredArticles
            .OrderByDescending(a => a.PublishDate)
            .Take(currentPage * articlesPerPage);
    }

    private async Task LoadMoreArticles()
    {
        loadingMore = true;
        StateHasChanged();
        
        await Task.Delay(500); // Simulate loading time
        currentPage++;
        UpdateCanLoadMore();
        
        loadingMore = false;
        StateHasChanged();
    }

    private void UpdateCanLoadMore()
    {
        var filteredArticles = activeFilter switch
        {
            "eurogamer" => GetFilteredArticles("Eurogamer"),
            "gamedeveloper" => GetFilteredArticles("Game Developer"),
            _ => allArticles
        };

        canLoadMore = filteredArticles.Count() > (currentPage * articlesPerPage);
    }

    private string GetSourceColor(string source)
    {
        return source switch
        {
            "Eurogamer" => "success",
            "Game Developer" => "info",
            _ => "secondary"
        };
    }
}